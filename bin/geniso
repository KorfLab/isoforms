#!/usr/bin/env python3

import argparse
import sys

import isoform
from isoform import Locus
from grimoire.genome import Reader

import isohint

parser = argparse.ArgumentParser(
    description='Alternative isoform generator with NMD')
parser.add_argument('fasta', type=str, metavar='<fasta file>',
    help='input fasta file (reads only the first sequence if multi-fasta)')
parser.add_argument('model', type=str, metavar='<splice model>',
    help='input splicemodel file')
parser.add_argument('--gff', required=False, type=str,
    metavar='<file>', help='gff with wormbase annotations')
# removed --out, always write to stdout
parser.add_argument('--min_intron', type=int, default=35,
    metavar='<int>', help='minimum length of intron [%(default)i]')
parser.add_argument('--min_exon', type=int, default=25,
    metavar='<int>', help='minimum length exon [%(default)i]')
parser.add_argument('--flank', type=int, default=99,
    metavar='<int>', help='genomic flank on each side [%(default)i]')
parser.add_argument('--limit', type=int, default=100,
    metavar='<int>', help='limit number of transcripts [%(default)i]')
parser.add_argument('--wdon', type=float, default=1.0,
    metavar='<float>', help='donor weight [%(default).2f]')
parser.add_argument('--wacc', type=float, default=1.0,
    metavar='<float>', help='acceptor weight [%(default).2f]')
parser.add_argument('--wexs', type=float, default=1.0,
    metavar='<float>', help='exon sequence weight [%(default).2f]')
parser.add_argument('--wins', type=float, default=1.0,
    metavar='<float>', help='intron sequence weight [%(default).2f]')
parser.add_argument('--wexl', type=float, default=1.0,
    metavar='<float>', help='exon length weight [%(default).2f]')
parser.add_argument('--winl', type=float, default=1.0,
    metavar='<float>', help='intron length weight [%(default).2f]')
parser.add_argument('--winf', type=float, default=1.0,
    metavar='<float>', help='intron frequency weight [%(default).2f]')
parser.add_argument('--translate', metavar='<gff>',
    help='translate transcripts and reduce nmd/non-stop targets')
parser.add_argument('--nonstop', type=float, default=1e-3,
    help='degradation from no stop codon [%(default)g]')
parser.add_argument('--nmd', type=float, default=1e-3,
    help='degradation from NMD [%(default)g]')
parser.add_argument('--countonly', action='store_true',
    help='report the total number of isoforms')

# hmm
parser.add_argument('--hmm', type=str, metavar='<hmm path>',
    help='input hmm exe path')
parser.add_argument('--hmm_model', type=str, metavar='<hmm model file path>',
    help='hmm model file path dir')

# parser for hints
parser.add_argument('--hints', action='store_true',
    help='run geniso with hmm cutoff')
parser.add_argument('--method', type=str,
    choices=['gap','smooth','perc','topk','thresh','adapt','none'],
    help='method for hints cutoff')
parser.add_argument('--k', type=int, default=5,
    help='k for smooth/topk methods [%(default)i]')
parser.add_argument('--p', type=int, default=25,
    help='percentile for perc method [%(default)i]')
parser.add_argument('--t', type=float, default=-5.0,
    help='threshold for thresh method [%(default).1f]')
parser.add_argument('--min_sites', type=int, default=5,
    help='minimum sites for adapt method [%(default)i]')
parser.add_argument('--rfhints', action='store_true',
    help='run geniso on multiple subspace of gene')

arg = parser.parse_args()

if arg.hints and not arg.hmm:
    parser.error("--hmm is required when using --hints")

model = isoform.read_splicemodel(arg.model)

weights = {
    'wacc': arg.wacc,
    'wdon': arg.wdon,
    'wexs': arg.wexs,
    'wins': arg.wins,
    'wexl': arg.wexl,
    'winl': arg.winl,
    'winf': arg.winf,
}

constraints = {
    'min_intron': arg.min_intron,
    'min_exon': arg.min_exon,
    'flank': arg.flank
}

if arg.out: fp = open(arg.out, 'w')
else: fp = sys.stdout

name, seq = next(isoform.read_fasta(arg.fasta))

##### run geniso with hint from hmm model #####
if arg.hints:
    method_kwargs = {
        'k': arg.k,
        'p': arg.p,
        't': arg.t,
        'min_sites': arg.min_sites
    }
    dons, accs = isohint.hints(
        arg.hmm, arg.fasta, arg.hmm_model,
        method=arg.method,
        **method_kwargs
    )
    locus = Locus(name, seq, model, constraints=constraints, weights=weights,
        limit=arg.limit, dons=dons, accs=accs)
    
##### original execution #####
else:
    locus = Locus(name, seq, model, constraints=constraints, weights=weights,
        limit=arg.limit)

##### copy paste from nmd-ish.py #####
if arg.translate:
    reader = Reader(fasta=arg.fasta, gff=arg.translate)
    region = next(reader)

    # find the canonical start codon
    gene = region.ftable.build_genes()[0]
    txs = gene.transcripts()
    atgs = set()
    for tx in txs:
        cdss = sorted(tx.cdss, key=lambda x: x.beg)
        atgs.add(cdss[0].beg - 1)
    cds_beg = sorted(atgs)[0]

    prevs = [iso.prob for iso in locus.isoforms]
    for iso in locus.isoforms:
        iso.translate(cds_beg)
        if iso.rnatype == 'non-stop':
            iso.prob *= arg.nonstop
        elif iso.rnatype == 'nmd-target':
            iso.prob *= arg.nmd

    # recompute probabilities
    total = sum(iso.prob for iso in locus.isoforms)
    if total > 0:
        for iso in locus.isoforms:
            iso.prob /= total