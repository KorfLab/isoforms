#!/usr/bin/env python3

import argparse
import glob
import os
import isoform2
import csv

parser = argparse.ArgumentParser(description='create files with' 
	'histogram ditances')
parser.add_argument('smallgenes', type=str, metavar='<directory>',
    help='path to smallgenes directory')
parser.add_argument('APC_results', nargs='*', type=str, 
	metavar='<directory>', help='path to directories with APC'
	'generated gff files')

args = parser.parse_args()

gff_paths = {}

if not args.smallgenes.endswith('/'):
	args.smallgenes = f'{args.smallgenes}/'

for fpath in glob.glob(f'{args.smallgenes}*gff3'):
	gID = '.'.join(fpath.split('/')[-1:][0].split('.')[1:3])
	gff_paths[gID] = [fpath]
		

for apc_dir in args.APC_results:
	if not apc_dir.endswith('/'):
		apc_dir = f'{apc_dir}/'
	for fpath in glob.glob(f'{apc_dir}*'):
		gID = '.'.join(fpath.split('/')[-1:][0].split('.')[1:3])
		gff_paths[gID].append(fpath)

comps = {}
for item in gff_paths.items():
	apc_paths = item[1][1:]
	for apc_path in apc_paths:
		i1 = isoform2.get_introns(item[1][0])
		i2 = isoform2.get_introns(apc_path)
		apc_type = '_'.join(apc_path.split('/')[-1].split('.')[3:-1])
		dist, intron_info = isoform2.expdiff(i1, i2)
		if apc_type not in comps:
			comps[apc_type] = {item[0]: dist}
		else:
			comps[apc_type][item[0]] = dist
'''
for item in comps.items():
	comps[item[0]] = dict(sorted(comps[item[0]].items(), key=lambda
							item: item[1]))
'''
columns = ['gene_id']
distances = {} 
for item in comps.items():
	columns.append(item[0])
	for gid in item[1].keys():
		if gid not in distances:
			distances[gid] = [item[1][gid]]
		else:	
			distances[gid].append(item[1][gid])

with open('apc_distances.csv', 'w') as csvfile:
	writer = csv.writer(csvfile)
	writer.writerow(columns)
	for item in distances.items():
		row = [x for x in item[1]]
		row = [item[0]]
		for dist in item[1]:
			row.append(dist)
		dif = float(item[1][1]) - float(item[1][0])
		row.append(dif)
		writer.writerow(row)
	



'''
# get intron parent transcripts and intron scores
wbintron_info = {}
for gID in gffPaths:
    parents = {}
    iscores = {}
    with open(gffPaths[gID][1], 'r') as file:
        for line in file.readlines():
            line = line.rstrip()
            line = line.split('\t')
            if line[1] == 'RNASeq_splice':
                score = line[5]
                intron = (line[3], line[4])
                iscores[intron] = score
            if line[1] == 'WormBase' and line[2] == 'intron':
                parent = f'{line[0]}_{line[8]}'
                intron = (line[3], line[4])
                if parent not in parents:
                    parents[parent] = [intron]
                else:
                    parents[parent].append(intron)
    wbintron_info[gID] = {'parents': parents, 'iscores': iscores}

wbg_scores = {}
for gene in wbintron_info:
    p_scores = {}
    for parent in wbintron_info[gene]['parents']:
        p_score = 0
        for intron in wbintron_info[gene]['parents'][parent]:
            p_score += float(wbintron_info[gene]['iscores'][intron])
        p_scores[parent] = p_score
    max_p = max(p_scores, key=p_scores.get)
    wbg_scores[gene] = wbintron_info[gene]['parents'][max_p]

# returns dictionary with only the top scoring/annotated wormbase isoform
print(wbg_scores)
'''

'''
count = 1
APCisos = {}
shortfile = 'shortAPC.gff'
#with open(gffPaths['2_1'][0], 'r') as file:
with open(shortfile, 'r') as file:
    for line in file.readlines():
        line = line.rstrip()
        line = line.split('\t')
        if line[0] == '': 
            APCisos[count] = []
            count += 1
        elif count > 1:
            if line[2] == 'intron':
                intron = (line[3], line[4]) 
                APCisos[count-1].append(intron)

for iso in APCisos:
    print(iso, APCisos[iso])
    print(WBisos[max(WBisos)][1])
    if APCisos[iso] == WBisos[max(WBisos)][1]: 
        print(iso, 'same')
'''





