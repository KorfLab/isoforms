#!/usr/bin/env python3

import argparse
import copy
import glob
import json
import os

# CLI

parser = argparse.ArgumentParser(description='optiso wrapper')
parser.add_argument('genes', help='directory of genes')
parser.add_argument('models', help='directory of models')
parser.add_argument('build', help='build directory')
arg = parser.parse_args()

if not os.path.exists(arg.build): os.makedirs(arg.build)
for sub in ('json', 'results'):
	if not os.path.exists(f'{arg.build}/{sub}'):
		os.makedirs(f'{arg.build}/{sub}')

template = {
	'gff_introns': True,
	'cli': {
		'--min_exon': 25,
		'--min_intron': 35,
		'--flank': 99,
		'--limit': 100,
		'--apwm': f'{os.path.abspath(arg.models)}/acc.pwm',
		'--dpwm': f'{os.path.abspath(arg.models)}/don.pwm',
		'--emm': f'{os.path.abspath(arg.models)}/exon.mm',
		'--imm': f'{os.path.abspath(arg.models)}/intron.mm',
		'--elen': f'{os.path.abspath(arg.models)}/exon.len',
		'--ilen': f'{os.path.abspath(arg.models)}/intron.len',
	},
	'data': []
}

## full set json
## really needs the multi-processor version
## therefore, not currently part of the makefile

full = copy.deepcopy(template)
for ff in glob.glob(f'{arg.genes}/*.fa'):
	ff = os.path.abspath(ff)
	name = os.path.basename(ff[:-3])
	gff = ff[:-2] + 'gff3'
	full['data'].append({
		'name': name,
		'fasta': ff,
		'gff': gff,
	})

with open(f'{arg.build}/json/all.json', 'w') as fp:
	fp.write(json.dumps(full, indent=4))

## individual jsons

for d in full['data']:
	single = copy.deepcopy(template)
	single['data'].append(d)
	with open(f'{arg.build}/json/{d["name"]}.json', 'w') as fp:
		fp.write(json.dumps(single, indent=4))

## makefile

with open(f'{arg.build}/Makefile', 'w') as fp:
	targets = []
	jsons = []
	names = []
	for d in full['data']:
		name = d['name']
		names.append(name)
		targets.append(os.path.abspath(f'{arg.build}/results/{name}.txt'))
		jsons.append(os.path.abspath(f'{arg.build}/json/{name}.json'))

	fp.write(f'all:\\\n')
	for target in targets:
		fp.write(f'\t{target}\\\n')
	fp.write('\n\n')

	for target, json, name in zip(targets, jsons, names):
		fp.write(f'{target}:\n\t optiso {json} --name {name} > {target}\n')


