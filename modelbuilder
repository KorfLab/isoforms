#!/usr/bin/env python3

import argparse
import glob
import os

from grimoire.genome import Reader
import isoform

#######
# CLI #
#######

parser = argparse.ArgumentParser(description='model builder for apc set')
parser.add_argument('apc', help='path to apc directory')
parser.add_argument('out', help='output directory')
parser.add_argument('--don', type=int, default=5, help="[%(default)i]")
parser.add_argument('--acc', type=int, default=6, help="[%(default)i]")
parser.add_argument('--emm', type=int, default=3, help="[%(default)i]")
parser.add_argument('--emin', type=int, default=25, help="[%(default)i]")
parser.add_argument('--emax', type=int, default=1000, help="[%(default)i]")
parser.add_argument('--imm', type=int, default=3, help="[%(default)i]")
parser.add_argument('--imin', type=int, default=35, help="[%(default)i]")
parser.add_argument('--imax', type=int, default=1000, help="[%(default)i]")
arg = parser.parse_args()

## collect subsequences
accs = []
dons = []
exons = []
introns = []
for ff in glob.glob(f'{arg.apc}/*.fa'):
	gf = ff[:-2] + 'gff3'
	genome = Reader(gff=gf, fasta=ff)
	tx = next(genome).ftable.build_genes()[0].transcripts()[0]
	for f in tx.exons: exons.append(f.seq_str())
	for f in tx.introns:
		iseq = f.seq_str()
		dons.append(iseq[0:arg.don])
		accs.append(iseq[-arg.acc:])
		introns.append(iseq)

## build models
acc = isoform.create_pwm(accs)
don = isoform.create_pwm(dons)
emm = isoform.create_markov(exons, arg.emm, 0, 0)
imm = isoform.create_markov(introns, arg.imm, arg.don, arg.acc)

## write models (hard-coded)
if not os.path.exists(arg.out): os.makedirs(arg.out)
isoform.write_pwm(f'{arg.out}/acc.pwm', acc)
isoform.write_pwm(f'{arg.out}/don.pwm', don)
isoform.write_markov(f'{arg.out}/exon.mm', emm)
isoform.write_markov(f'{arg.out}/intron.mm', imm)