#!/usr/bin/env python3

import argparse
import os
import isoform2
import csv
import copy

parser = argparse.ArgumentParser(
	description=(
		'Test different distance equations on APC results, '
		'get intron frequencies'
	)
)
	
parser.add_argument('apcgen_gffs', help='APC generated gff files')
parser.add_argument('smallgenes', 
	help='Directory with WormBase gff/fasta files')
parser.add_argument('--outf', required=False, help='outfile name')

args = parser.parse_args()

apc = {}
for file in os.listdir(args.apcgen_gffs):
	gid = file.split('.')[1]
	if args.apcgen_gffs.endswith('/'):
		apc[gid] = f'{args.apcgen_gffs}{file}'
	else:
		apc[gid] = f'{args.apcgen_gffs}/{file}'

wb = {}
for file in os.listdir(args.smallgenes):
	gid = file.split('.')[1]
	if file.endswith('.gff3'):
		if args.smallgenes.endswith('/'):
			wb[gid] = f'{args.smallgenes}{file}'
		else:
			wb[gid] = f'{args.smallgenes}/{file}'
	
genes = {}
for gid in apc:
	wb_ints = isoform2.get_introns(wb[gid])
	apc_ints = isoform2.get_introns(apc[gid])
	genes[gid] = (wb_ints, apc_ints)

def add_zeroes(introns1, introns2):
	
	i1 = copy.deepcopy(introns1)
	i2 = copy.deepcopy(introns2)
	
	for i in i1:
		if i not in i2: i2[i] = 0
	
	for i in i2:
		if i not in i1: i1[i] = 0
		
	return i1, i2
	
# do i really need to use deepcopy?
'''
def add_zeroes(introns1, introns2):
	
	for i in introns1:
		if i not in introns2:
			introns2[i] = 0
			
	for i in introns2:
		if i not in introns1:
			introns1[i] = 0		
			
	return introns1, introns2
'''

shared_freqs = {}
# need to come back to this
# compare to isoforks2
no_shared = []
missed_gids = []
for gid in genes:
	# use wormbase as reference, so you don't miss/make up introns
	ints1, ints2 = add_zeroes(genes[gid][0], genes[gid][1])
	shared_ints = []
	for i in ints1:
		if ints1[i] != 0 and ints2[i] == 0: 
			if gid not in missed_gids: missed_gids.append(gid)
		if ints1[i] != 0 and ints2[i] != 0: 
			shared_ints.append((ints1[i], ints2[i]))
	if len(shared_ints) == 0: 
		if gid not in no_shared:
			no_shared.append(gid)
	else:
		shared_freqs[gid] = shared_ints

if args.outf: outname = args.outf
else: outname = 'out_isodif.csv'

with open(outname, 'w') as csvfile:
	int_writer = csv.writer(csvfile)
	int_writer.writerow(['gene_id', 'wb', 'apc'])
	for gene in shared_freqs.items():
		for intron in gene[1]:
			int_writer.writerow([gene[0], intron[0], intron[1]])
		











