#!/usr/bin/env python3

import argparse
import sys

import isoform
from isoform import Locus

parser = argparse.ArgumentParser(
	description='Alternative isoform generator')
parser.add_argument('fasta', type=str, metavar='<fasta file>',
	help='input fasta file (reads only the first sequence if multi-fasta)')
parser.add_argument('--min_intron', required=False, type=int, default=35,
	metavar='<int>', help='minimum length of intron [%(default)i]')
parser.add_argument('--min_exon', required=False, type=int, default=25,
	metavar='<int>', help='minimum length exon [%(default)i]')
parser.add_argument('--flank', required=False, type=int, default=99,
	metavar='<int>', help='genomic flank on each side [%(default)i]')
parser.add_argument('--dpwm', required=False, type=str, metavar='<file>',
	help='position weight matrix for donor site [%(default)s]')
parser.add_argument('--apwm', required=False, type=str, metavar='<file>',
	help='position weight matrix for acceptor site [%(default)s]')
parser.add_argument('--emm', required=False, type=str, metavar='<file>',
	help='markov model for exon sequence [%(default)s]')
parser.add_argument('--imm', required=False, type=str, metavar='<file>',
	help='markov model for intron sequence [%(default)s]')
parser.add_argument('--elen', required=False, type=str, metavar='<file>',
	help='length model for exons [%(default)s]')
parser.add_argument('--ilen', required=False, type=str, metavar='<file>',
	help='length model for introns [%(default)s]')
parser.add_argument('--introns', required=False, type=str, metavar='<file>',
	help='use introns in gff for source of splice sites [%(default)s]')
parser.add_argument('--limit', required=False, type=int, default=100,
	metavar='<int>', help='limit number of transcripts [%(default)i]')
parser.add_argument('--wdpwm', required=False, type=float, default=1.0,
	metavar='<float>', help='dpwm weight [%(default).2f]')
parser.add_argument('--wapwm', required=False, type=float, default=1.0,
	metavar='<float>', help='apwm weight [%(default).2f]')
parser.add_argument('--wemm', required=False, type=float, default=1.0,
	metavar='<float>', help='emm weight [%(default).2f]')
parser.add_argument('--wimm', required=False, type=float, default=1.0,
	metavar='<float>', help='imm weight [%(default).2f]')
parser.add_argument('--welen', required=False, type=float, default=1.0,
	metavar='<float>', help='elen weight [%(default).2f]')
parser.add_argument('--wilen', required=False, type=float, default=1.0,
	metavar='<float>', help='ilen weight [%(default).2f]')
parser.add_argument('--icost', required=False, type=float, default=0.001,
	metavar='<float>', help='prob cost for each intron [%(default).2f]')
parser.add_argument('--countonly', action='store_true',
	help='report the total number of isoforms')
arg = parser.parse_args()

assert(arg.icost >= 0 and arg.icost <= 1)
icost = isoform.prob2score(arg.icost)
dpwm = isoform.read_pwm(arg.dpwm)   if arg.dpwm else None
apwm = isoform.read_pwm(arg.apwm)   if arg.apwm else None
elen = isoform.read_len(arg.elen)   if arg.elen else None
ilen = isoform.read_len(arg.ilen)   if arg.ilen else None
emm  = isoform.read_markov(arg.emm) if arg.emm  else None
imm  = isoform.read_markov(arg.imm) if arg.imm  else None
name, seq = next(isoform.read_fasta(arg.fasta))
models = (dpwm, apwm, emm, imm, elen, ilen)
weights = (arg.wdpwm, arg.wapwm, arg.wemm, arg.wimm, arg.welen, arg.wilen)
if arg.countonly:
	locus = Locus(name, seq, arg.min_intron, arg.min_exon, arg.flank,
		models, weights, icost, gff=arg.introns, limt=arg.limit, countonly=True)
	print(locus.name, locus.isocount, sep='\t')
else:
	locus = Locus(name, seq, arg.min_intron, arg.min_exon, arg.flank,
		models, weights, icost, limit=arg.limit, gff=arg.introns)
	locus.gff(sys.stdout)
